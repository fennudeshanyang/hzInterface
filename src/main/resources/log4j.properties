#log4j.rootLogger=DEBUG,A1
#log4j.logger.org.mybatis = info
#log4j.appender.A1=org.apache.log4j.ConsoleAppender
#log4j.appender.A1.layout=org.apache.log4j.PatternLayout
#log4j.appender.A1.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c]-[%p] %m%n

#===============================================================================================
#ERROR、WARN、INFO、DEBUG(四个级别)        级别一次从高到低
#ERROR级别只有logger.error()               级别最高
#WARN级别有logger.error(),logger.warn()
#DEBUG级别有logger.error(),logger.warn(),logger.info()
#DEBUG级别有logger.error(),logger.warn(),logger.info()，logger.debug()
#通过在这里定义的级别，可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
#此处可以设置全局日志记录的级别，下面针对全局的默认级别以及各个输出地方的特殊级别设置（各个输出地方也可以用语句log4j.appender.A.Threshold设置级别）
#如果全局日志的级别高于地方日志的级别则遵循全局的级别，如果全局的级别低于某个输出地方的级别，则该输出地方则遵守它的对应地方的级别
log4j.rootLogger=DEBUG,Console,FileInfo,FileWarn,FileError

####Console####
#定义Console的输出端是哪种类型，
#此句为定义名为A的输出端是哪种类型，可以是
#org.apache.log4j.ConsoleAppender				(控制台),
#org.apache.log4j.FileAppender		 			(文件),
#org.apache.log4j.DailyRollingFileAppender		(每天产生一个日志文件),
#org.apache.log4j.RollingFileAppender			(文件大小到达指定尺寸的时候产生一个新的文件)
#org.apache.log4j.WriterAppender				(将日志信息以流格式发送到任意指定的地方)
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#以输出的形式输出到控制台上
log4j.appender.Console.Target=System.out
#此句注释，则默认以全局级别(rootLogger)来输出日志
#log4j.appender.A.Threshold=ERROR
#此句为定义名为A的输出端是以哪种类型布局(以下是灵活地指定布局模式)
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#将来日志信息输出的模板方式  如:      2018-12-23 23:04:02,507 [cn.zrar.test.TestLog1][ERROR]:15 - 你好啊eror
log4j.appender.Console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%C][%p]:%L - %m%n


####FileInfo####
#每天产生一个文件
log4j.appender.FileInfo=org.apache.log4j.DailyRollingFileAppender
#文件存在的位置
log4j.appender.FileInfo.File=D:/log/info_
#假如说第一次出现问题产生了问题信息，如果又出现了问题，产生了问题信息，如果是false，会把之前的覆盖掉，如果是true，会在当前信息后面追加信息
log4j.appender.FileInfo.Append=true
#当前日志的输入级别，可以利用此将错误信息分门别类放在不同文件夹下
#ERROR、WARN、INFO、DEBUG
log4j.appender.FileInfo.Threshold=INFO
log4j.appender.FileInfo.MaxFileSize=20MB
#若是当天的的话，文件名暂时就为log_,，想文件名为类似“log_20150724.txt”这样的日志文件，当时间过了当天，如25号，会把之前的文件 保存为 log_20150724.txt，然后在创建一个25日的log_文件
log4j.appender.FileInfo.DatePattern=yyyy-MM-dd'.log'
log4j.appender.FileInfo.layout=org.apache.log4j.PatternLayout
log4j.appender.FileInfo.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%C][%p]:%L - %m%n


####FileWarn####
log4j.appender.FileWarn=org.apache.log4j.DailyRollingFileAppender
log4j.appender.FileWarn.File=D:/log/warn.log
log4j.appender.FileWarn.Append=true
log4j.appender.FileWarn.Threshold=warn
log4j.appender.FileWarn.MaxFileSize=20MB
log4j.appender.FileWarn.layout=org.apache.log4j.PatternLayout
log4j.appender.FileWarn.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%C][%p]:%L - %m%n


####FileError####
log4j.appender.FileError=org.apache.log4j.DailyRollingFileAppender
log4j.appender.FileError.File=D:/log/error.log
log4j.appender.FileError.Append=true
log4j.appender.FileError.Threshold=error
log4j.appender.FileError.MaxFileSize=20MB
log4j.appender.FileError.layout=org.apache.log4j.PatternLayout
log4j.appender.FileError.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%C][%p]:%L - %m%n